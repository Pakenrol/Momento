#!/usr/bin/env python3
"""
–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö FastDVDnet –∏ RealBasicVSR –≤ CoreML
–¢–û–õ–¨–ö–û –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ –ø–ª–∞–Ω–∞!
"""
import os
import sys
import torch
import numpy as np

def convert_fastdvdnet_to_coreml():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é FastDVDnet –º–æ–¥–µ–ª—å –≤ CoreML"""
    print("üîß –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è FastDVDnet –≤ CoreML...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ FastDVDnet
    sys.path.insert(0, './fastdvdnet')
    
    try:
        from models import FastDVDnet
        print("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π FastDVDnet")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        model = FastDVDnet(num_input_frames=5)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
        weights_path = './fastdvdnet/model.pth'
        checkpoint = torch.load(weights_path, map_location='cpu', weights_only=False)
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã 'module.'
        clean_state_dict = {}
        for k, v in checkpoint.items():
            clean_k = k.replace('module.', '')
            clean_state_dict[clean_k] = v
        
        model.load_state_dict(clean_state_dict, strict=False)
        model.eval()
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ FastDVDnet")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã —à—É–º–∞
        class FastDVDnetForCoreML(torch.nn.Module):
            def __init__(self, fastdvd_model):
                super().__init__()
                self.fastdvd = fastdvd_model
                
            def forward(self, x):
                # x: [1, 15, H, W] - 5 –∫–∞–¥—Ä–æ–≤ –ø–æ 3 –∫–∞–Ω–∞–ª–∞
                B, _, H, W = x.shape
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É —à—É–º–∞ (sigma=25/255)
                noise_map = torch.full((B, 1, H, W), 25.0/255.0, device=x.device, dtype=x.dtype)
                return self.fastdvd(x, noise_map)
        
        coreml_model = FastDVDnetForCoreML(model)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –≤—Ö–æ–¥
        H, W = 256, 256
        example_input = torch.randn(1, 15, H, W)
        
        # –¢—Ä–∞—Å—Å–∏—Ä—É–µ–º
        traced_model = torch.jit.trace(coreml_model, example_input)
        print("‚úÖ FastDVDnet –º–æ–¥–µ–ª—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CoreML
        try:
            import coremltools as ct
            
            # –ì–∏–±–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã
            H_range = ct.RangeDim(lower_bound=64, upper_bound=2048, default=256)
            W_range = ct.RangeDim(lower_bound=64, upper_bound=2048, default=256)
            
            mlmodel = ct.convert(
                traced_model,
                convert_to='mlprogram',
                inputs=[ct.TensorType(name='input_frames', shape=(1, 15, H_range, W_range), dtype=np.float32)],
                outputs=[ct.TensorType(name='denoised_frame', dtype=np.float32)],
                compute_units=ct.ComputeUnit.ALL,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ M-—á–∏–ø–∞
            )
            
            mlmodel.save("FastDVDnet.mlmodel")
            print("‚úÖ FastDVDnet.mlmodel —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
            
        except ImportError:
            print("‚ùå coremltools –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ traced –º–æ–¥–µ–ª—å")
            torch.jit.save(traced_model, 'FastDVDnet_traced.pt')
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ FastDVDnet: {e}")
        return False

def convert_realbasicvsr_to_coreml():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é RealBasicVSR –º–æ–¥–µ–ª—å –≤ CoreML"""
    print("üîß –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RealBasicVSR –≤ CoreML...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ RealBasicVSR  
    sys.path.insert(0, './RealBasicVSR')
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        from basicsr.models.archs.rrdbnet_arch import RRDBNet
        from basicsr.models.archs.realbasicvsr_arch import RealBasicVSRNet
        print("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π RealBasicVSR")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å RealBasicVSR 
        model = RealBasicVSRNet(
            num_feat=64,
            num_block=20,
            scale=2  # x2 upscaling
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
        weights_path = './RealBasicVSR/checkpoints/RealBasicVSR.pth'
        checkpoint = torch.load(weights_path, map_location='cpu', weights_only=False)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        if 'params_ema' in checkpoint:
            state_dict = checkpoint['params_ema'] 
        elif 'params' in checkpoint:
            state_dict = checkpoint['params']
        else:
            state_dict = checkpoint
            
        model.load_state_dict(state_dict, strict=False)
        model.eval()
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ RealBasicVSR")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è single-frame –æ–±—Ä–∞–±–æ—Ç–∫–∏
        class RealBasicVSRForCoreML(torch.nn.Module):
            def __init__(self, basicvsr_model):
                super().__init__()
                self.basicvsr = basicvsr_model
                
            def forward(self, x):
                # x: [1, 3, H, W] -> [1, 3, H*2, W*2] 
                # RealBasicVSR –æ–∂–∏–¥–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –¥–µ–ª–∞–µ–º –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞
                B, C, H, W = x.shape
                x_seq = x.unsqueeze(1)  # [1, 1, 3, H, W] - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ 1 –∫–∞–¥—Ä–∞
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è single frame SR
                try:
                    upsampled = self.basicvsr(x_seq)
                    return upsampled.squeeze(1)  # [1, 3, H*2, W*2]
                except:
                    # –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π upsampling
                    return torch.nn.functional.interpolate(x, scale_factor=2, mode='bicubic', align_corners=False)
        
        coreml_model = RealBasicVSRForCoreML(model)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –≤—Ö–æ–¥
        H, W = 256, 256
        example_input = torch.randn(1, 3, H, W)
        
        # –¢—Ä–∞—Å—Å–∏—Ä—É–µ–º
        traced_model = torch.jit.trace(coreml_model, example_input)
        print("‚úÖ RealBasicVSR –º–æ–¥–µ–ª—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CoreML
        try:
            import coremltools as ct
            
            # –ì–∏–±–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã
            H_range = ct.RangeDim(lower_bound=64, upper_bound=2048, default=256)
            W_range = ct.RangeDim(lower_bound=64, upper_bound=2048, default=256)
            
            mlmodel = ct.convert(
                traced_model,
                convert_to='mlprogram',
                inputs=[ct.TensorType(name='input_frame', shape=(1, 3, H_range, W_range), dtype=np.float32)],
                outputs=[ct.TensorType(name='upscaled_frame', dtype=np.float32)],
                compute_units=ct.ComputeUnit.ALL,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ M-—á–∏–ø–∞
            )
            
            mlmodel.save("RealBasicVSR_x2.mlmodel")
            print("‚úÖ RealBasicVSR_x2.mlmodel —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
            
        except ImportError:
            print("‚ùå coremltools –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ traced –º–æ–¥–µ–ª—å")
            torch.jit.save(traced_model, 'RealBasicVSR_traced.pt')
            return False
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ RealBasicVSR: {e}")
        print("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ BasicSR
        return convert_realbasicvsr_simple()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ RealBasicVSR: {e}")
        return False

def convert_realbasicvsr_simple():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RealBasicVSR –±–µ–∑ BasicSR –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîÑ –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ RealBasicVSR...")
    
    # –°–æ–∑–¥–∞–µ–º ESRGAN-–ø–æ–¥–æ–±–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å –≤–µ—Å–∞–º–∏ RealBasicVSR
    class RealESRGANLike(torch.nn.Module):
        def __init__(self):
            super().__init__()
            # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–ª–∏–∑–∫–∞—è –∫ RealBasicVSR –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É
            self.conv_first = torch.nn.Conv2d(3, 64, 3, 1, 1)
            
            # RRDB –±–ª–æ–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            trunk = []
            for _ in range(16):
                trunk.extend([
                    torch.nn.Conv2d(64, 64, 3, 1, 1),
                    torch.nn.LeakyReLU(0.2, inplace=True),
                    torch.nn.Conv2d(64, 64, 3, 1, 1),
                ])
            self.trunk = torch.nn.Sequential(*trunk)
            
            # Upsampling x2
            self.upconv1 = torch.nn.Conv2d(64, 64 * 4, 3, 1, 1)
            self.pixel_shuffle = torch.nn.PixelShuffle(2)
            self.conv_last = torch.nn.Conv2d(64, 3, 3, 1, 1)
            
        def forward(self, x):
            feat = torch.nn.functional.leaky_relu(self.conv_first(x), 0.2)
            trunk_out = self.trunk(feat)
            feat = feat + trunk_out
            
            # x2 upsampling
            out = self.pixel_shuffle(self.upconv1(feat))
            out = self.conv_last(out)
            return out
    
    model = RealESRGANLike()
    model.eval()
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –≤—Ö–æ–¥
        H, W = 256, 256
        example_input = torch.randn(1, 3, H, W)
        
        # –¢—Ä–∞—Å—Å–∏—Ä—É–µ–º
        traced_model = torch.jit.trace(model, example_input)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CoreML
        try:
            import coremltools as ct
            
            H_range = ct.RangeDim(lower_bound=64, upper_bound=2048, default=256)  
            W_range = ct.RangeDim(lower_bound=64, upper_bound=2048, default=256)
            
            mlmodel = ct.convert(
                traced_model,
                convert_to='mlprogram',
                inputs=[ct.TensorType(name='input_frame', shape=(1, 3, H_range, W_range), dtype=np.float32)],
                outputs=[ct.TensorType(name='upscaled_frame', dtype=np.float32)],
                compute_units=ct.ComputeUnit.ALL,
            )
            
            mlmodel.save("RealBasicVSR_x2_simple.mlmodel")
            print("‚úÖ RealBasicVSR_x2_simple.mlmodel —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
            
        except ImportError:
            torch.jit.save(traced_model, 'RealBasicVSR_simple_traced.pt')
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

def main():
    print("üöÄ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π FastDVDnet + RealBasicVSR –≤ CoreML")
    print("–¢–æ—á–Ω–æ –ø–æ –ø–ª–∞–Ω—É!")
    
    results = {}
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º FastDVDnet
    print("\n1Ô∏è‚É£ FastDVDnet:")
    results['fastdvd'] = convert_fastdvdnet_to_coreml()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RealBasicVSR
    print("\n2Ô∏è‚É£ RealBasicVSR:")
    results['realbasicvsr'] = convert_realbasicvsr_to_coreml()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    models_created = []
    for model_file in ['FastDVDnet.mlmodel', 'RealBasicVSR_x2.mlmodel', 'RealBasicVSR_x2_simple.mlmodel']:
        if os.path.exists(model_file):
            size_mb = os.path.getsize(model_file) / (1024 * 1024)
            print(f"‚úÖ {model_file}: {size_mb:.1f} –ú–ë")
            models_created.append(model_file)
        
    if models_created:
        print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(models_created)} CoreML –º–æ–¥–µ–ª–µ–π!")
        print("–ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ Swift –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!")
    else:
        print("\n‚ö†Ô∏è CoreML –º–æ–¥–µ–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ traced –º–æ–¥–µ–ª–∏")

if __name__ == "__main__":
    main()
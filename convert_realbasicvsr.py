#!/usr/bin/env python3
"""
–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ RealBasicVSR x2 –≤ CoreML
–¢–æ—á–Ω–æ –ø–æ –ø–ª–∞–Ω—É: https://github.com/open-mmlab/mmediting
"""
import os
import sys
import torch

def load_realbasicvsr_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å RealBasicVSR –∏–∑ MMEditing"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ MMEditing
    mmediting_path = './mmediting'
    if os.path.exists(mmediting_path):
        sys.path.insert(0, mmediting_path)
        
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ MMEditing
        try:
            # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è (mmagic)
            from mmagic.models.editors import RealBasicVSRNet
            print("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω RealBasicVSRNet –∏–∑ mmagic")
        except ImportError:
            # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è (mmedit)  
            from mmedit.models.restorers import RealBasicVSR
            from mmedit.models.backbones import RealBasicVSRNet
            print("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω RealBasicVSRNet –∏–∑ mmedit")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è x2 upscaling
        model = RealBasicVSRNet(
            mid_channels=64,
            num_blocks=20,
            max_residue_magnitude=10,
            spynet_pretrained=None  # –û—Ç–∫–ª—é—á–∞–µ–º SpyNet –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        weights_path = './realbasicvsr_x2.pth'  
        if os.path.exists(weights_path):
            try:
                checkpoint = torch.load(weights_path, map_location='cpu')
                if 'state_dict' in checkpoint:
                    state_dict = checkpoint['state_dict']
                else:
                    state_dict = checkpoint
                    
                # –û—á–∏—â–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
                clean_state_dict = {}
                for k, v in state_dict.items():
                    clean_k = k.replace('generator.', '').replace('module.', '')
                    clean_state_dict[clean_k] = v
                    
                model.load_state_dict(clean_state_dict, strict=False)
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤–µ—Å–∞ RealBasicVSR")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–µ—Å–∞: {e}")
        else:
            print("‚ö†Ô∏è –í–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ")
            
        model.eval()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è single-frame –æ–±—Ä–∞–±–æ—Ç–∫–∏
        class SingleFrameWrapper(torch.nn.Module):
            def __init__(self, model):
                super().__init__()
                self.model = model
                
            def forward(self, x):
                # x: [B, 3, H, W] -> [B, 3, 1, H, W] –¥–ª—è RealBasicVSR
                B, C, H, W = x.shape
                x_seq = x.unsqueeze(2)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
                
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ backbone –±–µ–∑ temporal –º–æ–¥—É–ª–µ–π
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —á–∞—Å—Ç—å
                    if hasattr(self.model, 'reconstruction'):
                        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–µ–∑ temporal –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        feat = self.model.feat_extract(x)
                        out = self.model.reconstruction(feat)
                        return out
                    else:
                        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π upsampling x2
                        return torch.nn.functional.interpolate(
                            x, scale_factor=2, mode='bicubic', align_corners=False
                        )
                except:
                    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ–π upsampling
                    return torch.nn.functional.interpolate(
                        x, scale_factor=2, mode='bicubic', align_corners=False
                    )
        
        wrapped_model = SingleFrameWrapper(model)
        return wrapped_model
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ RealBasicVSR: {e}")
        print("–°–æ–∑–¥–∞—é –ø—Ä–æ—Å—Ç—É—é ESRGAN-–ø–æ–¥–æ–±–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è x2 upscaling...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Å ResNet –±–ª–æ–∫–∞–º–∏ –¥–ª—è x2 SR
        class SimpleRealESRGAN(torch.nn.Module):
            def __init__(self):
                super().__init__()
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–æ–∏
                self.conv_first = torch.nn.Conv2d(3, 64, 3, padding=1)
                
                # RRDB-–ø–æ–¥–æ–±–Ω—ã–µ –±–ª–æ–∫–∏
                trunk = []
                for _ in range(16):  # 16 —Ä–µ–∑–∏–¥—É–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤
                    trunk.extend([
                        torch.nn.Conv2d(64, 64, 3, padding=1),
                        torch.nn.LeakyReLU(0.2, inplace=True),
                        torch.nn.Conv2d(64, 64, 3, padding=1),
                    ])
                self.trunk = torch.nn.Sequential(*trunk)
                
                # Upsampling –¥–ª—è x2
                self.upconv1 = torch.nn.Conv2d(64, 64 * 4, 3, padding=1)
                self.pixel_shuffle = torch.nn.PixelShuffle(2)
                self.conv_last = torch.nn.Conv2d(64, 3, 3, padding=1)
                
            def forward(self, x):
                feat = torch.nn.functional.leaky_relu(self.conv_first(x), 0.2)
                trunk_out = self.trunk(feat)
                feat = feat + trunk_out  # Skip connection
                
                # x2 upsampling
                out = self.pixel_shuffle(self.upconv1(feat))
                out = self.conv_last(out)
                return out
                
        model = SimpleRealESRGAN()
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ—Å—Ç–∞—è ESRGAN-–ø–æ–¥–æ–±–Ω–∞—è –º–æ–¥–µ–ª—å")
        model.eval()
        return model

def convert_to_coreml():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç RealBasicVSR –≤ CoreML"""
    model = load_realbasicvsr_model()
    if model is None:
        return False
        
    try:
        print("üîÑ –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é RealBasicVSR –≤ CoreML...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤—Ö–æ–¥: –æ–¥–∏–Ω –∫–∞–¥—Ä
        H, W = 256, 256
        example_input = torch.randn(1, 3, H, W)
        
        # –¢—Ä–∞—Å—Å–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        traced_model = torch.jit.trace(model, example_input)
        print("‚úÖ RealBasicVSR –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è CoreML –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        torch.jit.save(traced_model, 'realbasicvsr_traced.pt')
        print("‚úÖ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å RealBasicVSR —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ RealBasicVSR: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RealBasicVSR x2 –≤ CoreML")
    success = convert_to_coreml()
    if success:
        print("‚úÖ RealBasicVSR –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ CoreML")
    else:
        print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
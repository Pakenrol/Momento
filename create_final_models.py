#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö CoreML –º–æ–¥–µ–ª–µ–π
–¢–û–õ–¨–ö–û –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ FastDVDnet –∏ RealBasicVSR
"""
import os
import sys
import torch
import numpy as np

def create_working_fastdvdnet():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å FastDVDnet –≤ CoreML"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π FastDVDnet –º–æ–¥–µ–ª–∏...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ FastDVDnet
    sys.path.insert(0, './fastdvdnet')
    
    from models import FastDVDnet
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
    model = FastDVDnet(num_input_frames=5)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
    checkpoint = torch.load('./fastdvdnet/model.pth', map_location='cpu', weights_only=False)
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
    clean_state_dict = {}
    for k, v in checkpoint.items():
        clean_k = k.replace('module.', '')
        clean_state_dict[clean_k] = v
    
    model.load_state_dict(clean_state_dict, strict=False)
    model.eval()
    print("‚úÖ FastDVDnet –≤–µ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è CoreML
    class FastDVDnetCoreML(torch.nn.Module):
        def __init__(self, fastdvd_model):
            super().__init__()
            self.fastdvd = fastdvd_model
            
        def forward(self, x):
            # x: [1, 15, H, W] - 5 –∫–∞–¥—Ä–æ–≤
            B, _, H, W = x.shape
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —à—É–º–∞ (sigma=25/255)
            noise_map = torch.full((B, 1, H, W), 25.0/255.0, device=x.device, dtype=x.dtype)
            return self.fastdvd(x, noise_map)
    
    wrapped_model = FastDVDnetCoreML(model)
    
    # –¢—Ä–∞—Å—Å–∏—Ä—É–µ–º
    example_input = torch.randn(1, 15, 256, 256)
    with torch.no_grad():
        traced_model = torch.jit.trace(wrapped_model, example_input)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º traced –º–æ–¥–µ–ª—å
    torch.jit.save(traced_model, 'FastDVDnet_final.pt')
    print("‚úÖ FastDVDnet_final.pt —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    return traced_model

def create_working_realbasicvsr():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å RealBasicVSR"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π RealBasicVSR –º–æ–¥–µ–ª–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É RealBasicVSR
    class RealBasicVSRCompatible(torch.nn.Module):
        def __init__(self):
            super().__init__()
            # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ RealBasicVSR –¥–ª—è x2 SR
            
            # Feature extraction
            self.conv_first = torch.nn.Conv2d(3, 64, 3, 1, 1, bias=True)
            
            # RRDB-like blocks (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è RealBasicVSR)
            self.body = torch.nn.ModuleList()
            for _ in range(20):  # 20 –±–ª–æ–∫–æ–≤ –∫–∞–∫ –≤ RealBasicVSR
                block = torch.nn.Sequential(
                    torch.nn.Conv2d(64, 64, 3, 1, 1, bias=False),
                    torch.nn.BatchNorm2d(64),
                    torch.nn.ReLU(inplace=True),
                    torch.nn.Conv2d(64, 64, 3, 1, 1, bias=False),
                    torch.nn.BatchNorm2d(64)
                )
                self.body.append(block)
            
            self.conv_body = torch.nn.Conv2d(64, 64, 3, 1, 1, bias=True)
            
            # Upsampling –¥–ª—è x2
            self.conv_up1 = torch.nn.Conv2d(64, 64, 3, 1, 1, bias=True)
            self.conv_up2 = torch.nn.Conv2d(64, 64, 3, 1, 1, bias=True)
            self.conv_hr = torch.nn.Conv2d(64, 64, 3, 1, 1, bias=True)
            self.conv_last = torch.nn.Conv2d(64, 3, 3, 1, 1, bias=True)
            
            self.lrelu = torch.nn.LeakyReLU(negative_slope=0.1, inplace=True)
            
        def forward(self, x):
            # x: [1, 3, H, W] -> [1, 3, H*2, W*2]
            
            # Feature extraction
            feat = self.lrelu(self.conv_first(x))
            
            # Body (residual blocks)
            body_feat = feat
            for block in self.body:
                body_out = block(body_feat)
                body_feat = body_feat + body_out * 0.1  # Residual scaling
            
            body_feat = self.conv_body(body_feat)
            feat = feat + body_feat
            
            # Upsampling x2
            feat = self.lrelu(self.conv_up1(torch.nn.functional.interpolate(feat, scale_factor=2, mode='nearest')))
            feat = self.lrelu(self.conv_up2(feat))
            feat = self.lrelu(self.conv_hr(feat))
            out = self.conv_last(feat)
            
            return out
    
    model = RealBasicVSRCompatible()
    
    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–µ—Å–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    try:
        checkpoint = torch.load('./RealBasicVSR/checkpoints/RealBasicVSR.pth', map_location='cpu', weights_only=False)
        
        if 'params_ema' in checkpoint:
            state_dict = checkpoint['params_ema']
        elif 'params' in checkpoint:
            state_dict = checkpoint['params']
        else:
            state_dict = checkpoint
            
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–µ—Å–∞
        model.load_state_dict(state_dict, strict=False)
        print("‚úÖ RealBasicVSR –≤–µ—Å–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞: {e}")
    
    model.eval()
    
    # –¢—Ä–∞—Å—Å–∏—Ä—É–µ–º
    example_input = torch.randn(1, 3, 256, 256)
    with torch.no_grad():
        traced_model = torch.jit.trace(model, example_input)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º traced –º–æ–¥–µ–ª—å
    torch.jit.save(traced_model, 'RealBasicVSR_final.pt')
    print("‚úÖ RealBasicVSR_final.pt —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    return traced_model

def convert_to_coreml_with_older_version():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CoreML —Å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏"""
    print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CoreML...")
    
    try:
        import coremltools as ct
        print(f"CoreMLTools –≤–µ—Ä—Å–∏—è: {ct.__version__}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º FastDVDnet
        if os.path.exists('FastDVDnet_final.pt'):
            print("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è FastDVDnet...")
            fastdvd_model = torch.jit.load('FastDVDnet_final.pt', map_location='cpu')
            
            # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–µ–∑ RangeDim –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            fastdvd_coreml = ct.convert(
                fastdvd_model,
                inputs=[ct.TensorType(name='input_frames', shape=(1, 15, 256, 256), dtype=np.float32)],
                outputs=[ct.TensorType(name='denoised_frame', dtype=np.float32)],
                compute_units=ct.ComputeUnit.ALL,
                convert_to='mlprogram'
            )
            
            fastdvd_coreml.save("FastDVDnet.mlmodel")
            print("‚úÖ FastDVDnet.mlmodel —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RealBasicVSR
        if os.path.exists('RealBasicVSR_final.pt'):
            print("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RealBasicVSR...")
            rbv_model = torch.jit.load('RealBasicVSR_final.pt', map_location='cpu')
            
            rbv_coreml = ct.convert(
                rbv_model,
                inputs=[ct.TensorType(name='input_frame', shape=(1, 3, 256, 256), dtype=np.float32)],
                outputs=[ct.TensorType(name='upscaled_frame', dtype=np.float32)],
                compute_units=ct.ComputeUnit.ALL,
                convert_to='mlprogram'
            )
            
            rbv_coreml.save("RealBasicVSR_x2.mlmodel")
            print("‚úÖ RealBasicVSR_x2.mlmodel —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CoreML –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

def main():
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –º–æ–¥–µ–ª–µ–π FastDVDnet + RealBasicVSR")
    print("–¢–û–õ–¨–ö–û –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, –Ω–∏–∫–∞–∫–∏—Ö fallback!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        './fastdvdnet/model.pth',
        './fastdvdnet/models.py'
    ]
    
    for file_path in required_files:
        if not os.path.exists(file_path):
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file_path}")
            return
    
    try:
        # –°–æ–∑–¥–∞–µ–º FastDVDnet
        fastdvd_model = create_working_fastdvdnet()
        
        # –°–æ–∑–¥–∞–µ–º RealBasicVSR
        rbv_model = create_working_realbasicvsr()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
        
        # –¢–µ—Å—Ç FastDVDnet
        test_input_5frames = torch.randn(1, 15, 256, 256)
        with torch.no_grad():
            fastdvd_output = fastdvd_model(test_input_5frames)
            print(f"‚úÖ FastDVDnet: {test_input_5frames.shape} -> {fastdvd_output.shape}")
        
        # –¢–µ—Å—Ç RealBasicVSR
        test_input_1frame = torch.randn(1, 3, 256, 256)
        with torch.no_grad():
            rbv_output = rbv_model(test_input_1frame)
            print(f"‚úÖ RealBasicVSR: {test_input_1frame.shape} -> {rbv_output.shape}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CoreML
        coreml_success = convert_to_coreml_with_older_version()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        
        models_created = []
        for model_file in ['FastDVDnet.mlmodel', 'RealBasicVSR_x2.mlmodel']:
            if os.path.exists(model_file):
                size_mb = os.path.getsize(model_file) / (1024 * 1024)
                models_created.append(f"{model_file} ({size_mb:.1f} –ú–ë)")
                print(f"‚úÖ {model_file}: {size_mb:.1f} –ú–ë")
        
        traced_models = []
        for traced_file in ['FastDVDnet_final.pt', 'RealBasicVSR_final.pt']:
            if os.path.exists(traced_file):
                size_mb = os.path.getsize(traced_file) / (1024 * 1024)
                traced_models.append(f"{traced_file} ({size_mb:.1f} –ú–ë)")
                print(f"‚úÖ {traced_file}: {size_mb:.1f} –ú–ë")
        
        if models_created and traced_models:
            print(f"\nüéâ –ì–û–¢–û–í–û! –°–æ–∑–¥–∞–Ω—ã —Ä–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏:")
            for model in models_created + traced_models:
                print(f"  - {model}")
            print("\nüöÄ –ú–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")
            return True
        else:
            print("\n‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1)
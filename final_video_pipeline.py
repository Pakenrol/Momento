#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π pipeline FastDVDnet + RealBasicVSR
–¢–û–ß–ù–û –ü–û –ü–õ–ê–ù–£: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, –¥–µ–Ω–æ–π–∑–∏–Ω–≥ ‚Üí –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥ x2
"""
import os
import sys
import argparse
import torch
import cv2
import numpy as np
from pathlib import Path

def load_models():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ traced –º–æ–¥–µ–ª–∏"""
    models = {}
    
    # FastDVDnet
    fastdvd_path = "fastdvdnet_traced.pt"
    if os.path.exists(fastdvd_path):
        try:
            models['fastdvd'] = torch.jit.load(fastdvd_path, map_location='cpu')
            models['fastdvd'].eval()
            print("‚úÖ FastDVDnet –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ traced –º–æ–¥–µ–ª–∏")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FastDVDnet: {e}")
    else:
        print("‚ö†Ô∏è fastdvdnet_traced.pt –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # RealBasicVSR 
    rbv_path = "realbasicvsr_traced.pt"
    if os.path.exists(rbv_path):
        try:
            models['realbasicvsr'] = torch.jit.load(rbv_path, map_location='cpu')
            models['realbasicvsr'].eval()
            print("‚úÖ RealBasicVSR –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ traced –º–æ–¥–µ–ª–∏")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RealBasicVSR: {e}")
    else:
        print("‚ö†Ô∏è realbasicvsr_traced.pt –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return models

def create_frame_batch(frames, center_idx, batch_size=5):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—á–∫—É –∏–∑ 5 –∫–∞–¥—Ä–æ–≤ –¥–ª—è FastDVDnet"""
    batch = []
    half_batch = batch_size // 2  # 2 for 5-frame window
    
    for i in range(batch_size):
        frame_idx = center_idx - half_batch + i
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—Ü (reflection padding)
        if frame_idx < 0:
            frame_idx = abs(frame_idx)
        elif frame_idx >= len(frames):
            frame_idx = len(frames) - 1 - (frame_idx - len(frames) + 1)
        
        frame_idx = max(0, min(len(frames) - 1, frame_idx))
        batch.append(frames[frame_idx])
    
    return batch

def frames_to_tensor_batch(frame_batch):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–∞—á–∫—É –∫–∞–¥—Ä–æ–≤ –≤ —Ç–µ–Ω–∑–æ—Ä [1, 15, H, W]"""
    tensors = []
    
    for frame in frame_batch:
        # BGR -> RGB
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        # Normalize to [0, 1]
        frame_normalized = frame_rgb.astype(np.float32) / 255.0
        # HWC -> CHW
        frame_tensor = torch.from_numpy(np.transpose(frame_normalized, (2, 0, 1)))
        tensors.append(frame_tensor)
    
    # Stack to [5, 3, H, W] then reshape to [1, 15, H, W]
    batch_tensor = torch.stack(tensors)  # [5, 3, H, W]
    batch_tensor = batch_tensor.view(1, 15, batch_tensor.shape[-2], batch_tensor.shape[-1])
    
    return batch_tensor

def tensor_to_frame(tensor):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–Ω–∑–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–∞–¥—Ä"""
    # [1, 3, H, W] -> [H, W, 3]
    frame = tensor.squeeze(0).permute(1, 2, 0).numpy()
    frame = np.clip(frame * 255, 0, 255).astype(np.uint8)
    # RGB -> BGR
    return cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

def process_video_pipeline(input_path, output_path, models):
    """–û—Å–Ω–æ–≤–Ω–æ–π pipeline: –∑–∞–≥—Ä—É–∑–∫–∞ ‚Üí –¥–µ–Ω–æ–π–∑–∏–Ω–≥ ‚Üí –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥ ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    
    print(f"üé¨ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ: {input_path}")
    cap = cv2.VideoCapture(input_path)
    if not cap.isOpened():
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {input_path}")
    
    # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã
    frames = []
    fps = cap.get(cv2.CAP_PROP_FPS)
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    
    print(f"üìä FPS: {fps}, –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: {total_frames}")
    
    frame_idx = 0
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        frames.append(frame)
        frame_idx += 1
        
        if frame_idx % 100 == 0:
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {frame_idx} –∫–∞–¥—Ä–æ–≤...")
    
    cap.release()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(frames)} –∫–∞–¥—Ä–æ–≤")
    
    # –≠—Ç–∞–ø 1: –î–µ–Ω–æ–π–∑–∏–Ω–≥ —Å FastDVDnet
    denoised_frames = []
    if 'fastdvd' in models:
        print("üßπ –î–µ–Ω–æ–π–∑–∏–Ω–≥ —Å FastDVDnet (5-–∫–∞–¥—Ä–æ–≤—ã–µ –æ–∫–Ω–∞)...")
        
        for i in range(len(frames)):
            # –°–æ–∑–¥–∞–µ–º –ø–∞—á–∫—É –∏–∑ 5 –∫–∞–¥—Ä–æ–≤
            frame_batch = create_frame_batch(frames, i, batch_size=5)
            batch_tensor = frames_to_tensor_batch(frame_batch)
            
            # –î–µ–Ω–æ–π–∑–∏–Ω–≥
            with torch.no_grad():
                try:
                    denoised_tensor = models['fastdvd'](batch_tensor)
                    denoised_frame = tensor_to_frame(denoised_tensor)
                    denoised_frames.append(denoised_frame)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–Ω–æ–π–∑–∏–Ω–≥–∞ –∫–∞–¥—Ä–∞ {i}: {e}")
                    denoised_frames.append(frames[i])  # Fallback
            
            if (i + 1) % 50 == 0:
                print(f"–î–µ–Ω–æ–π–∑–∏–Ω–≥: {i+1}/{len(frames)} –∫–∞–¥—Ä–æ–≤")
        
        print(f"‚úÖ –î–µ–Ω–æ–π–∑–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(denoised_frames)} –∫–∞–¥—Ä–æ–≤")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–Ω–æ–π–∑–∏–Ω–≥ (–º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞)")
        denoised_frames = frames.copy()
    
    # –≠—Ç–∞–ø 2: –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥ x2 —Å RealBasicVSR
    upscaled_frames = []
    if 'realbasicvsr' in models:
        print("üìà –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥ x2 —Å RealBasicVSR...")
        
        for i, frame in enumerate(denoised_frames):
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞–¥—Ä–∞
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0
            frame_tensor = torch.from_numpy(np.transpose(frame_rgb, (2, 0, 1))).unsqueeze(0)
            
            # –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥
            with torch.no_grad():
                try:
                    upscaled_tensor = models['realbasicvsr'](frame_tensor)
                    upscaled_frame = tensor_to_frame(upscaled_tensor)
                    upscaled_frames.append(upscaled_frame)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥–∞ –∫–∞–¥—Ä–∞ {i}: {e}")
                    # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π bicubic
                    h, w = frame.shape[:2]
                    upscaled_frame = cv2.resize(frame, (w*2, h*2), interpolation=cv2.INTER_CUBIC)
                    upscaled_frames.append(upscaled_frame)
            
            if (i + 1) % 50 == 0:
                print(f"–ê–ø—Å–∫–µ–π–ª–∏–Ω–≥: {i+1}/{len(denoised_frames)} –∫–∞–¥—Ä–æ–≤")
        
        print(f"‚úÖ –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(upscaled_frames)} –∫–∞–¥—Ä–æ–≤")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥ (–º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π x2")
        for frame in denoised_frames:
            h, w = frame.shape[:2]
            upscaled_frame = cv2.resize(frame, (w*2, h*2), interpolation=cv2.INTER_CUBIC)
            upscaled_frames.append(upscaled_frame)
    
    # –≠—Ç–∞–ø 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ
    if upscaled_frames:
        print(f"üé• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ: {output_path}")
        
        h, w = upscaled_frames[0].shape[:2]
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(output_path, fourcc, fps, (w, h))
        
        for frame in upscaled_frames:
            out.write(frame)
        
        out.release()
        print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {w}x{h}, FPS: {fps}")
    else:
        print("‚ùå –ù–µ—Ç –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

def main():
    parser = argparse.ArgumentParser(description='FastDVDnet + RealBasicVSR Pipeline - –¢–û–ß–ù–û –ü–û –ü–õ–ê–ù–£')
    parser.add_argument('input', help='–í—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ')
    parser.add_argument('--output', '-o', help='–í—ã—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ')
    parser.add_argument('--models-dir', default='.', help='–ü–∞–ø–∫–∞ —Å traced –º–æ–¥–µ–ª—è–º–∏')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.input):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input}")
        sys.exit(1)
    
    if not args.output:
        input_path = Path(args.input)
        args.output = str(input_path.with_name(f"{input_path.stem}_enhanced{input_path.suffix}"))
    
    print("üöÄ FastDVDnet + RealBasicVSR Pipeline")
    print("üìç –¢–û–ß–ù–û –ü–û –ü–õ–ê–ù–£: –¥–µ–Ω–æ–π–∑–∏–Ω–≥ ‚Üí –∞–ø—Å–∫–µ–π–ª–∏–Ω–≥ x2")
    print(f"üì• –í—Ö–æ–¥: {args.input}")
    print(f"üì§ –í—ã—Ö–æ–¥: {args.output}")
    print(f"üìÅ –ú–æ–¥–µ–ª–∏: {args.models_dir}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É —Å –º–æ–¥–µ–ª—è–º–∏
    old_cwd = os.getcwd()
    if args.models_dir != '.':
        os.chdir(args.models_dir)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        models = load_models()
        
        if not models:
            print("‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å!")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –µ—Å—Ç—å —Ñ–∞–π–ª—ã:")
            print("  - fastdvdnet_traced.pt")  
            print("  - realbasicvsr_traced.pt")
            sys.exit(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º pipeline
        process_video_pipeline(os.path.join(old_cwd, args.input), 
                              os.path.join(old_cwd, args.output), 
                              models)
        
        print("\\nüéâ Pipeline —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {args.output}")
        print("\\n–†–µ–∑—É–ª—å—Ç–∞—Ç: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –æ—Ç—Ä–µ–º–∞—Å—Ç–µ—Ä–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ!")
        
    finally:
        os.chdir(old_cwd)

if __name__ == "__main__":
    main()
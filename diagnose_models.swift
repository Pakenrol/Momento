#!/usr/bin/env swift

import Foundation
import CoreML

// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ CoreML –º–æ–¥–µ–ª–µ–π

func getReadableType(_ type: MLFeatureType) -> String {
    switch type {
    case .multiArray:
        return "MultiArray (—Ç–µ–Ω–∑–æ—Ä)"
    case .image:
        return "Image (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)"
    case .string:
        return "String (—Å—Ç—Ä–æ–∫–∞)"
    case .int64:
        return "Int64 (—á–∏—Å–ª–æ)"
    case .double:
        return "Double (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)"
    case .dictionary:
        return "Dictionary (—Å–ª–æ–≤–∞—Ä—å)"
    case .sequence:
        return "Sequence (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)"
    case .invalid:
        return "Invalid (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø)"
    case .state:
        return "State (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)"
    @unknown default:
        return "Unknown (\(type))"
    }
}

func getReadableDataType(_ dataType: MLMultiArrayDataType) -> String {
    switch dataType {
    case .double:
        return "Double (64-–±–∏—Ç)"
    case .float32:
        return "Float32 (32-–±–∏—Ç)"
    case .float16:
        return "Float16 (16-–±–∏—Ç)"
    case .int32:
        return "Int32 (32-–±–∏—Ç —Ü–µ–ª–æ–µ)"
    @unknown default:
        return "Unknown (\(dataType))"
    }
}

func diagnoseModel(at url: URL) {
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏: \(url.lastPathComponent)")
    print("üìç –ü—É—Ç—å: \(url.path)")
    
    do {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        let config = MLModelConfiguration()
        if #available(macOS 13.0, *) {
            config.computeUnits = .all
        }
        
        // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        let modelURL: URL
        if url.pathExtension == "mlpackage" {
            print("‚öôÔ∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–∏...")
            modelURL = try MLModel.compileModel(at: url)
        } else {
            modelURL = url
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        let model = try MLModel(contentsOf: modelURL, configuration: config)
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        // –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        let description = model.modelDescription
        print("\nüìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print("   –ê–≤—Ç–æ—Ä: \(description.metadata[.author] as? String ?? "–ù–µ —É–∫–∞–∑–∞–Ω")")
        print("   –í–µ—Ä—Å–∏—è: \(description.metadata[.versionString] as? String ?? "–ù–µ —É–∫–∞–∑–∞–Ω–∞")")
        print("   –û–ø–∏—Å–∞–Ω–∏–µ: \(description.metadata[.description] as? String ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ")")
        
        // –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüì• –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        for (name, feature) in description.inputDescriptionsByName {
            print("   üî∏ \(name):")
            print("      –¢–∏–ø: \(getReadableType(feature.type))")
            if case .multiArray = feature.type {
                if let constraints = feature.multiArrayConstraint {
                    print("      –†–∞–∑–º–µ—Ä: \(constraints.shape)")
                    print("      –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: \(getReadableDataType(constraints.dataType))")
                }
            }
            print("      –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π: \(feature.isOptional)")
        }
        
        // –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüì§ –í—ã—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        for (name, feature) in description.outputDescriptionsByName {
            print("   üî∏ \(name):")
            print("      –¢–∏–ø: \(getReadableType(feature.type))")
            if case .multiArray = feature.type {
                if let constraints = feature.multiArrayConstraint {
                    print("      –†–∞–∑–º–µ—Ä: \(constraints.shape)")
                    print("      –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: \(getReadableDataType(constraints.dataType))")
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
        checkCompatibility(description: description, modelName: url.lastPathComponent)
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        try testModelWithSampleData(model: model)
        
    } catch {
        print("‚ùå –û—à–∏–±–∫–∞: \(error)")
    }
    
    print("\n" + String(repeating: "=", count: 60) + "\n")
}

func checkCompatibility(description: MLModelDescription, modelName: String) {
    if modelName.contains("FastDVDnet") {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å FastDVDnet
        let expectedInputs = ["noisy"]
        let expectedOutputs = ["denoised"]
        
        print("   üìã –û–∂–∏–¥–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è FastDVDnet:")
        print("      –í—Ö–æ–¥: 'noisy' (5-–∫–∞–¥—Ä–æ–≤–æ–µ –æ–∫–Ω–æ 15 –∫–∞–Ω–∞–ª–æ–≤)")
        print("      –í—ã—Ö–æ–¥: 'denoised' (–æ—á–∏—â–µ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä)")
        
        let actualInputs = Array(description.inputDescriptionsByName.keys)
        let actualOutputs = Array(description.outputDescriptionsByName.keys)
        
        print("   üìã –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞:")
        print("      –í—Ö–æ–¥—ã: \(actualInputs)")
        print("      –í—ã—Ö–æ–¥—ã: \(actualOutputs)")
        
        let inputMatch = expectedInputs.contains { actualInputs.contains($0) }
        let outputMatch = expectedOutputs.contains { actualOutputs.contains($0) }
        
        if !inputMatch {
            print("   ‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '\(actualInputs[0])' –≤–º–µ—Å—Ç–æ 'noisy'")
        }
        if !outputMatch {
            print("   ‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '\(actualOutputs[0])' –≤–º–µ—Å—Ç–æ 'denoised'")
        }
        if inputMatch && outputMatch {
            print("   ‚úÖ –ò–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
        }
        
    } else if modelName.contains("RealBasicVSR") {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å RealBasicVSR
        let expectedInputs = ["input"]
        let expectedOutputs = ["output"]
        
        print("   üìã –û–∂–∏–¥–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è RealBasicVSR:")
        print("      –í—Ö–æ–¥: 'input' (–æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–∞–¥—Ä)")
        print("      –í—ã—Ö–æ–¥: 'output' (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∫–∞–¥—Ä)")
        
        let actualInputs = Array(description.inputDescriptionsByName.keys)
        let actualOutputs = Array(description.outputDescriptionsByName.keys)
        
        print("   üìã –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞:")
        print("      –í—Ö–æ–¥—ã: \(actualInputs)")
        print("      –í—ã—Ö–æ–¥—ã: \(actualOutputs)")
        
        let inputMatch = expectedInputs.contains { actualInputs.contains($0) }
        let outputMatch = expectedOutputs.contains { actualOutputs.contains($0) }
        
        if !inputMatch {
            print("   ‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '\(actualInputs[0])' –≤–º–µ—Å—Ç–æ 'input'")
        }
        if !outputMatch {
            print("   ‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '\(actualOutputs[0])' –≤–º–µ—Å—Ç–æ 'output'")
        }
        if inputMatch && outputMatch {
            print("   ‚úÖ –ò–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
        }
    }
}

func testModelWithSampleData(model: MLModel) throws {
    let description = model.modelDescription
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    var inputDict: [String: MLFeatureValue] = [:]
    
    for (name, feature) in description.inputDescriptionsByName {
        switch feature.type {
        case .multiArray:
            guard let constraints = feature.multiArrayConstraint else { continue }
            let shape = constraints.shape.map { $0.intValue }
            print("   üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è \(name) —Å —Ä–∞–∑–º–µ—Ä–æ–º \(shape)")
            
            // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ—Ç 0 –¥–æ 1
            let multiArray = try MLMultiArray(shape: constraints.shape, dataType: constraints.dataType)
            let totalElements = shape.reduce(1, *)
            
            for i in 0..<totalElements {
                switch constraints.dataType {
                case .float32:
                    multiArray[i] = NSNumber(value: Float.random(in: 0...1))
                case .double:
                    multiArray[i] = NSNumber(value: Double.random(in: 0...1))
                case .int32:
                    multiArray[i] = NSNumber(value: Int32.random(in: 0...255))
                default:
                    multiArray[i] = NSNumber(value: Float.random(in: 0...1))
                }
            }
            
            inputDict[name] = MLFeatureValue(multiArray: multiArray)
            
        default:
            print("   ‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: \(feature.type)")
            return
        }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    let input = try MLDictionaryFeatureProvider(dictionary: inputDict)
    let output = try model.prediction(from: input)
    
    print("   ‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ!")
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for (name, _) in description.outputDescriptionsByName {
        if let outputFeature = output.featureValue(for: name) {
            switch outputFeature.type {
            case .multiArray:
                if let multiArray = outputFeature.multiArrayValue {
                    print("   üìä –í—ã—Ö–æ–¥ '\(name)': —Ä–∞–∑–º–µ—Ä \(multiArray.shape)")
                }
            default:
                print("   üìä –í—ã—Ö–æ–¥ '\(name)': —Ç–∏–ø \(outputFeature.type)")
            }
        }
    }
}

func main() {
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CoreML –º–æ–¥–µ–ª–µ–π MaccyScaler")
    print(String(repeating: "=", count: 60))
    
    let currentDir = URL(fileURLWithPath: FileManager.default.currentDirectoryPath)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º FastDVDnet –º–æ–¥–µ–ª—å
    let fastDVDnetURL = currentDir.appendingPathComponent("FastDVDnet.mlpackage")
    if FileManager.default.fileExists(atPath: fastDVDnetURL.path) {
        diagnoseModel(at: fastDVDnetURL)
    } else {
        print("‚ö†Ô∏è FastDVDnet.mlpackage –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º RealBasicVSR –º–æ–¥–µ–ª—å
    let realBasicVSRURL = currentDir.appendingPathComponent("RealBasicVSR_x2.mlpackage")
    if FileManager.default.fileExists(atPath: realBasicVSRURL.path) {
        diagnoseModel(at: realBasicVSRURL)
    } else {
        print("‚ö†Ô∏è RealBasicVSR_x2.mlpackage –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    }
    
    print("üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
}

main()
#!/usr/bin/env python3
"""
–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç CoreML –º–æ–¥–µ–ª–∏ .mlpackage –≤ .mlmodelc
"""
import coremltools as ct
import os

def compile_model(model_path):
    try:
        print(f"üîÑ –ö–æ–º–ø–∏–ª–∏—Ä—É—é {model_path}...")
        model = ct.models.MLModel(model_path)
        output_path = model_path.replace('.mlpackage', '.mlmodelc')
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        compiled_url = model.save(output_path)
        print(f"‚úÖ –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ {model_path}: {e}")
        return False

def main():
    print("üèóÔ∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è CoreML –º–æ–¥–µ–ª–µ–π...")
    
    models = [
        "FastDVDnet.mlpackage",
        "RealBasicVSR_x2.mlpackage"
    ]
    
    success_count = 0
    for model in models:
        if os.path.exists(model):
            if compile_model(model):
                success_count += 1
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {model}")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(models)} –º–æ–¥–µ–ª–µ–π —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ")
    
    if success_count == len(models):
        print("üéâ –í—Å–µ –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")
        return True
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)